// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1149422544;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__blox_api__decode_blox_document_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "decode_blox_document",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_document = <crate::api::blox_api::BloxDocument>::sse_decode(&mut deserializer);
            let api_format =
                <crate::api::blox_api::BloxOutputFormat>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok =
                    crate::api::blox_api::decode_blox_document(api_document, api_format)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__blox_api__encode_blox_document_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "encode_blox_document",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_document = <crate::api::blox_api::BloxDocument>::sse_decode(&mut deserializer);
            let api_use_shorthand = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok =
                    crate::api::blox_api::encode_blox_document(api_document, api_use_shorthand)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::simple::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::simple::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__blox_api__parse_blox_file_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_blox_file",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_file_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::blox_api::parse_blox_file(api_file_path).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__blox_api__parse_blox_string_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_blox_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_content = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::blox_api::parse_blox_string(api_content)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__blox_api__validate_blox_syntax_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "validate_blox_syntax",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_content = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::blox_api::validate_blox_syntax(api_content)?;
                Ok(output_ok)
            })())
        },
    )
}

// Section: dart2rust

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::blox_api::BloxBlock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_blockType = <String>::sse_decode(deserializer);
        let mut var_level = <usize>::sse_decode(deserializer);
        let mut var_attributes =
            <std::collections::HashMap<String, String>>::sse_decode(deserializer);
        let mut var_content = <String>::sse_decode(deserializer);
        let mut var_children = <Vec<crate::api::blox_api::BloxBlock>>::sse_decode(deserializer);
        let mut var_lineNumber = <usize>::sse_decode(deserializer);
        let mut var_inlineElements =
            <Vec<crate::api::blox_api::BloxInlineElement>>::sse_decode(deserializer);
        let mut var_listItems = <Vec<crate::api::blox_api::BloxListItem>>::sse_decode(deserializer);
        let mut var_table = <Option<crate::api::blox_api::BloxTable>>::sse_decode(deserializer);
        return crate::api::blox_api::BloxBlock {
            block_type: var_blockType,
            level: var_level,
            attributes: var_attributes,
            content: var_content,
            children: var_children,
            line_number: var_lineNumber,
            inline_elements: var_inlineElements,
            list_items: var_listItems,
            table: var_table,
        };
    }
}

impl SseDecode for crate::api::blox_api::BloxDocument {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_blocks = <Vec<crate::api::blox_api::BloxBlock>>::sse_decode(deserializer);
        let mut var_metadata =
            <std::collections::HashMap<String, String>>::sse_decode(deserializer);
        return crate::api::blox_api::BloxDocument {
            blocks: var_blocks,
            metadata: var_metadata,
        };
    }
}

impl SseDecode for crate::api::blox_api::BloxInlineElement {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Text(var_field0);
            }
            1 => {
                let mut var_text = <String>::sse_decode(deserializer);
                let mut var_url = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Link {
                    text: var_text,
                    url: var_url,
                };
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Bold(var_field0);
            }
            3 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Italic(var_field0);
            }
            4 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Code(var_field0);
            }
            5 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Math(var_field0);
            }
            6 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Strikethrough(var_field0);
            }
            7 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Highlight(var_field0);
            }
            8 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Subscript(var_field0);
            }
            9 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Superscript(var_field0);
            }
            10 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Reference(var_field0);
            }
            11 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_text = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Footnote {
                    id: var_id,
                    text: var_text,
                };
            }
            12 => {
                let mut var_elementType = <String>::sse_decode(deserializer);
                let mut var_attributes =
                    <std::collections::HashMap<String, String>>::sse_decode(deserializer);
                let mut var_content = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxInlineElement::Custom {
                    element_type: var_elementType,
                    attributes: var_attributes,
                    content: var_content,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::blox_api::BloxListItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_itemType = <crate::api::blox_api::BloxListItemType>::sse_decode(deserializer);
        let mut var_content = <String>::sse_decode(deserializer);
        let mut var_children = <Vec<crate::api::blox_api::BloxListItem>>::sse_decode(deserializer);
        let mut var_level = <usize>::sse_decode(deserializer);
        return crate::api::blox_api::BloxListItem {
            item_type: var_itemType,
            content: var_content,
            children: var_children,
            level: var_level,
        };
    }
}

impl SseDecode for crate::api::blox_api::BloxListItemType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::blox_api::BloxListItemType::Unchecked;
            }
            1 => {
                return crate::api::blox_api::BloxListItemType::Checked;
            }
            2 => {
                let mut var_term = <String>::sse_decode(deserializer);
                return crate::api::blox_api::BloxListItemType::Definition { term: var_term };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::blox_api::BloxOutputFormat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::blox_api::BloxOutputFormat::Html,
            1 => crate::api::blox_api::BloxOutputFormat::Markdown,
            2 => crate::api::blox_api::BloxOutputFormat::Json,
            3 => crate::api::blox_api::BloxOutputFormat::PlainText,
            _ => unreachable!("Invalid variant for BloxOutputFormat: {}", inner),
        };
    }
}

impl SseDecode for crate::api::blox_api::BloxTable {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_caption = <Option<String>>::sse_decode(deserializer);
        let mut var_header = <Option<crate::api::blox_api::BloxTableRow>>::sse_decode(deserializer);
        let mut var_rows = <Vec<crate::api::blox_api::BloxTableRow>>::sse_decode(deserializer);
        return crate::api::blox_api::BloxTable {
            caption: var_caption,
            header: var_header,
            rows: var_rows,
        };
    }
}

impl SseDecode for crate::api::blox_api::BloxTableCell {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_content = <String>::sse_decode(deserializer);
        let mut var_colspan = <usize>::sse_decode(deserializer);
        let mut var_rowspan = <usize>::sse_decode(deserializer);
        let mut var_isHeader = <bool>::sse_decode(deserializer);
        return crate::api::blox_api::BloxTableCell {
            content: var_content,
            colspan: var_colspan,
            rowspan: var_rowspan,
            is_header: var_isHeader,
        };
    }
}

impl SseDecode for crate::api::blox_api::BloxTableRow {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_cells = <Vec<crate::api::blox_api::BloxTableCell>>::sse_decode(deserializer);
        return crate::api::blox_api::BloxTableRow { cells: var_cells };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::blox_api::BloxBlock> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::blox_api::BloxBlock>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::blox_api::BloxInlineElement> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::blox_api::BloxInlineElement>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::blox_api::BloxListItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::blox_api::BloxListItem>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::blox_api::BloxTableCell> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::blox_api::BloxTableCell>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::blox_api::BloxTableRow> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::blox_api::BloxTableRow>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::blox_api::BloxTable> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::blox_api::BloxTable>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::blox_api::BloxTableRow> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::blox_api::BloxTableRow>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        4 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__blox_api__parse_blox_file_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__blox_api__decode_blox_document_impl(ptr, rust_vec_len, data_len),
        2 => wire__crate__api__blox_api__encode_blox_document_impl(ptr, rust_vec_len, data_len),
        3 => wire__crate__api__simple__greet_impl(ptr, rust_vec_len, data_len),
        6 => wire__crate__api__blox_api__parse_blox_string_impl(ptr, rust_vec_len, data_len),
        7 => wire__crate__api__blox_api__validate_blox_syntax_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxBlock {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.block_type.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.content.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
            self.line_number.into_into_dart().into_dart(),
            self.inline_elements.into_into_dart().into_dart(),
            self.list_items.into_into_dart().into_dart(),
            self.table.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxBlock
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxBlock>
    for crate::api::blox_api::BloxBlock
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxBlock {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxDocument {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.blocks.into_into_dart().into_dart(),
            self.metadata.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxDocument
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxDocument>
    for crate::api::blox_api::BloxDocument
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxDocument {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxInlineElement {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::blox_api::BloxInlineElement::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Link { text, url } => [
                1.into_dart(),
                text.into_into_dart().into_dart(),
                url.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::blox_api::BloxInlineElement::Bold(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Italic(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Code(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Math(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Strikethrough(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Highlight(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Subscript(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Superscript(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Reference(field0) => {
                [10.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blox_api::BloxInlineElement::Footnote { id, text } => [
                11.into_dart(),
                id.into_into_dart().into_dart(),
                text.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::blox_api::BloxInlineElement::Custom {
                element_type,
                attributes,
                content,
            } => [
                12.into_dart(),
                element_type.into_into_dart().into_dart(),
                attributes.into_into_dart().into_dart(),
                content.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxInlineElement
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxInlineElement>
    for crate::api::blox_api::BloxInlineElement
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxInlineElement {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxListItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.item_type.into_into_dart().into_dart(),
            self.content.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxListItem
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxListItem>
    for crate::api::blox_api::BloxListItem
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxListItem {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxListItemType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::blox_api::BloxListItemType::Unchecked => [0.into_dart()].into_dart(),
            crate::api::blox_api::BloxListItemType::Checked => [1.into_dart()].into_dart(),
            crate::api::blox_api::BloxListItemType::Definition { term } => {
                [2.into_dart(), term.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxListItemType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxListItemType>
    for crate::api::blox_api::BloxListItemType
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxListItemType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxOutputFormat {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Html => 0.into_dart(),
            Self::Markdown => 1.into_dart(),
            Self::Json => 2.into_dart(),
            Self::PlainText => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxOutputFormat
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxOutputFormat>
    for crate::api::blox_api::BloxOutputFormat
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxOutputFormat {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxTable {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.caption.into_into_dart().into_dart(),
            self.header.into_into_dart().into_dart(),
            self.rows.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxTable
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxTable>
    for crate::api::blox_api::BloxTable
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxTable {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxTableCell {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.content.into_into_dart().into_dart(),
            self.colspan.into_into_dart().into_dart(),
            self.rowspan.into_into_dart().into_dart(),
            self.is_header.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxTableCell
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxTableCell>
    for crate::api::blox_api::BloxTableCell
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxTableCell {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blox_api::BloxTableRow {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.cells.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blox_api::BloxTableRow
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blox_api::BloxTableRow>
    for crate::api::blox_api::BloxTableRow
{
    fn into_into_dart(self) -> crate::api::blox_api::BloxTableRow {
        self
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::blox_api::BloxBlock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.block_type, serializer);
        <usize>::sse_encode(self.level, serializer);
        <std::collections::HashMap<String, String>>::sse_encode(self.attributes, serializer);
        <String>::sse_encode(self.content, serializer);
        <Vec<crate::api::blox_api::BloxBlock>>::sse_encode(self.children, serializer);
        <usize>::sse_encode(self.line_number, serializer);
        <Vec<crate::api::blox_api::BloxInlineElement>>::sse_encode(
            self.inline_elements,
            serializer,
        );
        <Vec<crate::api::blox_api::BloxListItem>>::sse_encode(self.list_items, serializer);
        <Option<crate::api::blox_api::BloxTable>>::sse_encode(self.table, serializer);
    }
}

impl SseEncode for crate::api::blox_api::BloxDocument {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::blox_api::BloxBlock>>::sse_encode(self.blocks, serializer);
        <std::collections::HashMap<String, String>>::sse_encode(self.metadata, serializer);
    }
}

impl SseEncode for crate::api::blox_api::BloxInlineElement {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::blox_api::BloxInlineElement::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Link { text, url } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(text, serializer);
                <String>::sse_encode(url, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Bold(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Italic(field0) => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Code(field0) => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Math(field0) => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Strikethrough(field0) => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Highlight(field0) => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Subscript(field0) => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Superscript(field0) => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Reference(field0) => {
                <i32>::sse_encode(10, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Footnote { id, text } => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(id, serializer);
                <String>::sse_encode(text, serializer);
            }
            crate::api::blox_api::BloxInlineElement::Custom {
                element_type,
                attributes,
                content,
            } => {
                <i32>::sse_encode(12, serializer);
                <String>::sse_encode(element_type, serializer);
                <std::collections::HashMap<String, String>>::sse_encode(attributes, serializer);
                <String>::sse_encode(content, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::blox_api::BloxListItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::blox_api::BloxListItemType>::sse_encode(self.item_type, serializer);
        <String>::sse_encode(self.content, serializer);
        <Vec<crate::api::blox_api::BloxListItem>>::sse_encode(self.children, serializer);
        <usize>::sse_encode(self.level, serializer);
    }
}

impl SseEncode for crate::api::blox_api::BloxListItemType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::blox_api::BloxListItemType::Unchecked => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::blox_api::BloxListItemType::Checked => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::blox_api::BloxListItemType::Definition { term } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(term, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::blox_api::BloxOutputFormat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::blox_api::BloxOutputFormat::Html => 0,
                crate::api::blox_api::BloxOutputFormat::Markdown => 1,
                crate::api::blox_api::BloxOutputFormat::Json => 2,
                crate::api::blox_api::BloxOutputFormat::PlainText => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::blox_api::BloxTable {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.caption, serializer);
        <Option<crate::api::blox_api::BloxTableRow>>::sse_encode(self.header, serializer);
        <Vec<crate::api::blox_api::BloxTableRow>>::sse_encode(self.rows, serializer);
    }
}

impl SseEncode for crate::api::blox_api::BloxTableCell {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.content, serializer);
        <usize>::sse_encode(self.colspan, serializer);
        <usize>::sse_encode(self.rowspan, serializer);
        <bool>::sse_encode(self.is_header, serializer);
    }
}

impl SseEncode for crate::api::blox_api::BloxTableRow {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::blox_api::BloxTableCell>>::sse_encode(self.cells, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::blox_api::BloxBlock> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::blox_api::BloxBlock>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::blox_api::BloxInlineElement> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::blox_api::BloxInlineElement>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::blox_api::BloxListItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::blox_api::BloxListItem>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::blox_api::BloxTableCell> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::blox_api::BloxTableCell>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::blox_api::BloxTableRow> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::blox_api::BloxTableRow>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::blox_api::BloxTable> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::blox_api::BloxTable>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::blox_api::BloxTableRow> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::blox_api::BloxTableRow>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
