// Mocks generated by Mockito 5.4.4 from annotations
// in loom/test/unit/domain/export_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:loom/features/export/domain/entities/export_entities.dart'
    as _i2;
import 'package:loom/features/export/domain/repositories/export_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExportResult_0 extends _i1.SmartFake implements _i2.ExportResult {
  _FakeExportResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExportRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExportRepository extends _i1.Mock implements _i3.ExportRepository {
  MockExportRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ExportResult> exportContent(_i2.ExportRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportContent,
          [request],
        ),
        returnValue: _i4.Future<_i2.ExportResult>.value(_FakeExportResult_0(
          this,
          Invocation.method(
            #exportContent,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.ExportResult>);

  @override
  List<_i2.ExportFormat> getSupportedFormats() => (super.noSuchMethod(
        Invocation.method(
          #getSupportedFormats,
          [],
        ),
        returnValue: <_i2.ExportFormat>[],
      ) as List<_i2.ExportFormat>);

  @override
  bool isFormatSupported(_i2.ExportFormat? format) => (super.noSuchMethod(
        Invocation.method(
          #isFormatSupported,
          [format],
        ),
        returnValue: false,
      ) as bool);

  @override
  String getFileExtension(_i2.ExportFormat? format) => (super.noSuchMethod(
        Invocation.method(
          #getFileExtension,
          [format],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getFileExtension,
            [format],
          ),
        ),
      ) as String);
}
